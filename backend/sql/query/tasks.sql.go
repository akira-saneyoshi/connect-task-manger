// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package query

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :exec

INSERT INTO tasks (id, title, description, is_completed, user_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	ID          string         `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	IsCompleted bool           `json:"is_completed"`
	UserID      string         `json:"user_id"`
}

// sql/queries/tasks.sql
func (q *Queries) CreateTask(ctx context.Context, arg *CreateTaskParams) error {
	_, err := q.exec(ctx, q.createTaskStmt, createTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.IsCompleted,
		arg.UserID,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteTaskStmt, deleteTask, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, is_completed, user_id, created_at, updated_at FROM tasks WHERE id = ? LIMIT 1
`

func (q *Queries) GetTaskByID(ctx context.Context, id string) (*Task, error) {
	row := q.queryRow(ctx, q.getTaskByIDStmt, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, is_completed, user_id, created_at, updated_at FROM tasks WHERE user_id = ? ORDER BY created_at DESC
`

func (q *Queries) ListTasks(ctx context.Context, userID string) ([]*Task, error) {
	rows, err := q.query(ctx, q.listTasksStmt, listTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET title = ?, description = ?, is_completed = ? WHERE id = ?
`

type UpdateTaskParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	IsCompleted bool           `json:"is_completed"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg *UpdateTaskParams) error {
	_, err := q.exec(ctx, q.updateTaskStmt, updateTask,
		arg.Title,
		arg.Description,
		arg.IsCompleted,
		arg.ID,
	)
	return err
}
